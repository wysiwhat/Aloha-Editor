// Generated by CoffeeScript 1.3.3
(function() {

  define(['aloha', 'aloha/plugin', 'jquery', 'popover', 'ui/ui', 'css!../../../cnx/angular/css/angular.css'], function(Aloha, Plugin, jQuery, Popover, UI) {
    var DIALOG_HTML, attachExpressionEvents, attachVariableEvents, insertNgVariable, showModalDialog, variablePopulator,
      _this = this;
    DIALOG_HTML = '<form class="modal" id="angular-variable-modal" tabindex="-1" role="dialog" aria-labelledby="angular-variable-modalLabel" aria-hidden="true">\n  <div class="modal-header">\n    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>\n    <h3 id="angular-variable-modalLabel">Add Variable</h3>\n  </div>\n  <div class="modal-body">\n    <div id="link-text">\n      <h4>Variable name</h4>\n      <div>\n        <input id="angular-variable-name" class="input-xlarge" type="text" placeholder="Enter a variable name here" required />\n      </div>\n    </div>\n  <div class="modal-footer">\n    <button class="btn btn-primary link-save">Submit</button>\n    <button class="btn" data-dismiss="modal" aria-hidden="true">Cancel</button>\n  </div>\n</form>';
    attachVariableEvents = function($el) {
      var _this = this;
      $el.alohaBlock();
      $el.each(function(i, node) {
        var $input, $node;
        $node = jQuery(node);
        $node.tooltip({
          title: "Variable " + ($node.data('variable')) + ".\nDrag to change."
        });
        $input = $node.children('.ng-model-input');
        $input.val($node.data('ng-value') || '0');
        return $node.children('.ng-model-value').text($input.val());
      });
      $el.on('mousedown', function(evt) {
        var $input;
        $el = jQuery(evt.target);
        $el.data('startX', evt.pageX);
        $input = $el.children('.ng-model-input');
        return $el.data('startValue', parseFloat($input.val() || 0));
      });
      $el.on('mousemove', function(evt) {
        var $input, diff, startValue;
        $el = jQuery(evt.target);
        if (!$el.data('startX')) {
          return;
        }
        $input = $el.children('.ng-model-input');
        diff = evt.pageX - $el.data('startX');
        startValue = $el.data('startValue');
        $input.val(diff + startValue);
        return $input.trigger('input');
      });
      return $el.on('mouseup', function(evt) {
        var x;
        $el = jQuery(evt.target);
        return x = $el.data('startX', null);
      });
    };
    attachExpressionEvents = function($el) {
      return $el.alohaBlock();
    };
    Aloha.bind('aloha-editable-activated', function(evt, ed) {
      var $app;
      $app = ed.editable.obj;
      attachVariableEvents($app.find('.ng-model-wrapper'));
      attachExpressionEvents($app.find('.ng-expression-wrapper'));
      $app.on('input', '.ng-model-input', function(evt) {
        var $el;
        $el = jQuery(evt.target);
        return $el.parent().children('.ng-model-value').text($el.val());
      });
      $app.on('input', '.ng-expression-input', function(evt) {
        var $el, $rendered;
        $el = jQuery(evt.target);
        $el.parent().find('.ng-expression-rendered').remove();
        $rendered = jQuery('<span></span>').addClass('ng-expression-rendered').attr('ng-bind', $el.val());
        $el.parent().append($rendered);
        $app.find('.ng-model-wrapper input').each(function(i, el) {
          $el = jQuery(el);
          return $el.data('ng-value', $el.val());
        });
        angular.bootstrap($app[0]);
        return $app.find('.ng-model-wrapper input').each(function(i, el) {
          $el = jQuery(el);
          $el.val($el.data('ng-value') || '0');
          return $el.trigger('input');
        });
      });
      return angular.bootstrap($app[0]);
    });
    showModalDialog = function($el) {
      var dialog, root,
        _this = this;
      root = Aloha.activeEditable.obj;
      dialog = jQuery(DIALOG_HTML);
      dialog.on('submit', function(evt) {
        var $input, variableName;
        evt.preventDefault();
        $input = dialog.find('#angular-variable-name');
        variableName = $input.val();
        $el.attr('data-variable', variableName);
        $el.children('input').attr('ng-model', variableName);
        return dialog.modal('hide');
      });
      dialog.modal('show');
      dialog.on('hidden', function() {
        return dialog.remove();
      });
      return dialog;
    };
    insertNgVariable = function() {
      var $el, $input, $tail, range, variable;
      $el = jQuery('<span class="ng-model-wrapper"><span class="ng-model-value"></span><input class="ng-model-input" type="number"/></span>');
      range = Aloha.Selection.getRangeObject();
      if (range.isCollapsed()) {
        GENTICS.Utils.Dom.insertIntoDOM($el, range, Aloha.activeEditable.obj);
        $el.trigger('show');
        return makeCloseIcon($el);
      } else {
        $tail = jQuery('<span class="aloha-ephemera-wrapper">&#160;</span>');
        variable = range.getText();
        $el.attr('data-variable', variable);
        $input = $el.children('input');
        $el.append($input);
        $el.attr('ng-model', variable);
        GENTICS.Utils.Dom.removeRange(range);
        return GENTICS.Utils.Dom.insertIntoDOM($el.add($tail), range, Aloha.activeEditable.obj);
      }
    };
    UI.adopt('insertNgVariable', null, {
      click: function() {
        var dialog, newVariable,
          _this = this;
        newVariable = jQuery('<span class="ng-model-wrapper aloha-new-link"><span class="ng-model-value"></span><input class="ng-model-input" type="number"/></span>');
        dialog = showModalDialog(newVariable);
        return dialog.on('hidden', function() {
          var range;
          if (!newVariable.data('variable')) {
            return;
          }
          range = Aloha.Selection.getRangeObject();
          if (range.isCollapsed()) {
            GENTICS.Utils.Dom.extendToWord(range);
          }
          if (range.isCollapsed()) {
            GENTICS.Utils.Dom.insertIntoDOM(newVariable, range, Aloha.activeEditable.obj);
            range.startContainer = range.endContainer = newVariable.contents()[0];
            range.startOffset = 0;
            range.endOffset = newVariable.text().length;
          } else {
            GENTICS.Utils.Dom.addMarkup(range, newVariable, false);
          }
          newVariable = Aloha.activeEditable.obj.find('.aloha-new-link');
          newVariable.removeClass('aloha-new-link');
          return attachVariableEvents(newVariable);
        });
      }
    });
    UI.adopt('insertNgExpression', null, {
      click: function() {
        var $newExpression, range, setExpression;
        $newExpression = jQuery('<span contenteditable="false" class="aloha-new-link ng-expression-wrapper"><input class="ng-expression-input" value="x+y"/><span class="ng-expression-rendered">{{x+y}}</span></span>');
        setExpression = function($expr, value) {
          $expr.find('input').val(value);
          return $expr.find('.ng-expression-rendered').text("{{" + value + "}}");
        };
        range = Aloha.Selection.getRangeObject();
        if (range.isCollapsed()) {
          GENTICS.Utils.Dom.extendToWord(range);
        }
        if (range.isCollapsed()) {
          GENTICS.Utils.Dom.insertIntoDOM($newExpression, range, Aloha.activeEditable.obj);
          range.startContainer = range.endContainer = $newExpression.contents()[0];
          range.startOffset = 0;
          range.endOffset = $newExpression.text().length;
        } else {
          GENTICS.Utils.Dom.addMarkup(range, $newExpression, false);
        }
        $newExpression = Aloha.activeEditable.obj.find('.aloha-new-link');
        $newExpression.removeClass('aloha-new-link');
        return $newExpression.alohaBlock();
      }
    });
    variablePopulator = function($el) {
      var $bubble, $max, $min, $slider, max, min, val;
      $min = jQuery('<input style="width: 2em;"/>');
      $max = jQuery('<input style="width: 2em;"/>');
      $slider = jQuery('<span></span>');
      $bubble = jQuery('<span></span>');
      $bubble.append($min);
      $bubble.append($slider);
      $bubble.append($max);
      min = $el.data('min') || 0;
      max = $el.data('max') || 100;
      val = Math.max(min, Math.min($el.data('value') || 0, max));
      $min.val(min);
      $max.val(max);
      $slider.slider({
        min: min,
        max: max,
        value: val,
        slide: function(event, ui) {
          var $input;
          val = ui.value;
          $input = $el.children('.ng-model-input');
          $input.val(val);
          $input.trigger('input');
          return $el.children('.ng-model-value').text(val);
        }
      });
      $min.on('input', function() {
        val = $min.val();
        $el.data('min', val);
        return $slider.slider({
          min: val
        });
      });
      $max.on('input', function() {
        val = $max.val();
        $el.data('max', val);
        return $slider.slider({
          max: val
        });
      });
      return $bubble;
    };
    return Popover.register({
      hover: false,
      selector: '.ng-model-wrapper',
      populator: variablePopulator
    });
  });

}).call(this);
