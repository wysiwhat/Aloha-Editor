// Generated by CoffeeScript 1.3.3
(function() {

  define(['aloha', 'aloha/plugin', 'jquery', 'popover', 'ui/ui', 'css!../../../cnx/angular/css/angular.css'], function(Aloha, Plugin, jQuery, Popover, UI) {
    var DIALOG_HTML, attachExpressionEvents, attachVariableEvents, expressionPopulator, insertNgVariable, showModalDialog, startAngular, updateExpression, variablePopulator,
      _this = this;
    DIALOG_HTML = '<form class="modal" id="angular-variable-modal" tabindex="-1" role="dialog" aria-labelledby="angular-variable-modalLabel" aria-hidden="true">\n  <div class="modal-header">\n    <button type="button" class="close" data-dismiss="modal" aria-hidden="true">x</button>\n    <h3 id="angular-variable-modalLabel">Add Variable</h3>\n  </div>\n  <div class="modal-body">\n    <div id="link-text">\n      <h4>Variable name</h4>\n      <div>\n        <input id="angular-variable-name" class="input-xlarge" type="text" placeholder="Enter a variable name here" required />\n      </div>\n    </div>\n  <div class="modal-footer">\n    <button class="btn btn-primary link-save">Submit</button>\n    <button class="btn" data-dismiss="modal" aria-hidden="true">Cancel</button>\n  </div>\n</form>';
    attachVariableEvents = function($el) {
      $el.alohaBlock();
      return $el.each(function(i, node) {
        var $input, $node;
        $node = jQuery(node);
        $node.attr('title', 'Click to change');
        $node.attr('data-placement', 'right');
        $node.tooltip();
        $input = $node.children('.ng-model-input');
        $input.val($node.data('ng-value') || '0');
        return $node.children('.ng-model-value').text($input.val());
      });
    };
    attachExpressionEvents = function($el) {
      $el.alohaBlock();
      return $el.each(function(i, node) {
        var $node;
        $node = jQuery(node);
        $node.attr('title', 'Click to change');
        $node.attr('data-placement', 'right');
        return $node.tooltip();
      });
    };
    startAngular = function($editable) {
      var $allVariables,
        _this = this;
      $editable = $editable.last();
      $allVariables = $editable.find('.ng-model-wrapper');
      angular.bootstrap($editable);
      return $allVariables.each(function(i, el) {
        var $el, $input;
        $el = jQuery(el);
        $input = $el.find('input');
        $input.val($el.data('ng-value') || '0');
        return $input.trigger('input');
      });
    };
    updateExpression = function($el, expression) {
      var $rendered;
      $el.data('ng-expression', expression);
      $el.find('.ng-expression-rendered').remove();
      $rendered = jQuery('<span></span>').addClass('ng-expression-rendered').attr('ng-bind', expression).appendTo($el);
      return startAngular($el.parents('.aloha-editable'));
    };
    Aloha.bind('aloha-editable-activated', function(evt, ed) {
      var $app;
      $app = ed.editable.obj;
      attachVariableEvents($app.find('.ng-model-wrapper'));
      attachExpressionEvents($app.find('.ng-expression-wrapper'));
      $app.on('input', '.ng-model-input', function(evt) {
        var $el, val;
        $el = jQuery(evt.target);
        val = parseFloat($el.val());
        $el.data('ng-value', val);
        return $el.parent().children('.ng-model-value').text(val);
      });
      return startAngular($app);
    });
    showModalDialog = function($el, variableText) {
      var $input, dialog, root, variableName, variableValue,
        _this = this;
      root = Aloha.activeEditable.obj;
      dialog = jQuery(DIALOG_HTML);
      variableValue = parseFloat(variableText);
      variableName = '';
      if (isNaN(variableValue) && /[a-zA-Z]+/.test(variableText)) {
        variableName = variableText;
      }
      if (isNaN(variableValue)) {
        variableValue = 0;
      }
      $el.data('ng-value', variableValue);
      $input = dialog.find('#angular-variable-name');
      $input.val(variableName);
      dialog.on('submit', function(evt) {
        evt.preventDefault();
        variableName = $input.val();
        $el.attr('data-variable', variableName);
        $el.children('input').attr('ng-model', variableName);
        return dialog.modal('hide');
      });
      dialog.modal('show');
      dialog.on('hidden', function() {
        return dialog.remove();
      });
      setTimeout((function() {
        return $input.focus();
      }), 100);
      return dialog;
    };
    insertNgVariable = function() {
      var $el, $input, $tail, range, variable;
      $el = jQuery('<span class="ng-model-wrapper"><span class="ng-model-value"></span><input class="ng-model-input" type="number"/></span>');
      range = Aloha.Selection.getRangeObject();
      if (range.isCollapsed()) {
        GENTICS.Utils.Dom.insertIntoDOM($el, range, Aloha.activeEditable.obj);
        $el.trigger('show');
        return makeCloseIcon($el);
      } else {
        $tail = jQuery('<span class="aloha-ephemera-wrapper">&#160;</span>');
        variable = range.getText();
        $el.attr('data-variable', variable);
        $input = $el.children('input');
        $el.append($input);
        $el.attr('ng-model', variable);
        GENTICS.Utils.Dom.removeRange(range);
        return GENTICS.Utils.Dom.insertIntoDOM($el.add($tail), range, Aloha.activeEditable.obj);
      }
    };
    UI.adopt('insertNgVariable', null, {
      click: function() {
        var dialog, newVariable, range, variableText,
          _this = this;
        newVariable = jQuery('<span class="ng-model-wrapper aloha-new-link"><span class="ng-model-value"></span><input class="ng-model-input" type="number"/></span>');
        range = Aloha.Selection.getRangeObject();
        variableText = range.isCollapsed() ? "" : range.getText();
        dialog = showModalDialog(newVariable, variableText);
        return dialog.on('hidden', function() {
          if (!newVariable.data('variable')) {
            return;
          }
          range = Aloha.Selection.getRangeObject();
          if (range.isCollapsed()) {
            GENTICS.Utils.Dom.extendToWord(range);
          }
          if (range.isCollapsed()) {
            GENTICS.Utils.Dom.insertIntoDOM(newVariable, range, Aloha.activeEditable.obj);
            range.startContainer = range.endContainer = newVariable.contents()[0];
            range.startOffset = 0;
            range.endOffset = newVariable.text().length;
          } else {
            GENTICS.Utils.Dom.addMarkup(range, newVariable, false);
          }
          newVariable = Aloha.activeEditable.obj.find('.aloha-new-link');
          newVariable.removeClass('aloha-new-link');
          attachVariableEvents(newVariable);
          return startAngular(Aloha.activeEditable.obj);
        });
      }
    });
    UI.adopt('insertNgExpression', null, {
      click: function() {
        var $newExpression, range, setExpression;
        $newExpression = jQuery('<span contenteditable="false" class="aloha-new-link ng-expression-wrapper"><span class="ng-expression-rendered">{{x+y}}</span></span>');
        setExpression = function($expr, value) {
          return $expr.find('.ng-expression-rendered').text("{{" + value + "}}");
        };
        range = Aloha.Selection.getRangeObject();
        if (range.isCollapsed()) {
          GENTICS.Utils.Dom.extendToWord(range);
        }
        if (range.isCollapsed()) {
          GENTICS.Utils.Dom.insertIntoDOM($newExpression, range, Aloha.activeEditable.obj);
          range.startContainer = range.endContainer = $newExpression.contents()[0];
          range.startOffset = 0;
          range.endOffset = $newExpression.text().length;
        } else {
          GENTICS.Utils.Dom.addMarkup(range, $newExpression, false);
        }
        $newExpression = Aloha.activeEditable.obj.find('.aloha-new-link');
        $newExpression.removeClass('aloha-new-link');
        $newExpression.alohaBlock();
        return $newExpression.trigger('show');
      }
    });
    variablePopulator = function($el) {
      var $bubble, $max, $min, $slider, max, min, val;
      $min = jQuery('<input style="width: 2em;"/>');
      $max = jQuery('<input style="width: 2em;"/>');
      $slider = jQuery('<span></span>');
      $bubble = jQuery('<span class="aloha-dialog"></span>');
      $bubble.append($min);
      $bubble.append($slider);
      $bubble.append($max);
      min = $el.data('ng-min') || 0;
      max = $el.data('ng-max') || 100;
      val = Math.max(min, Math.min($el.data('ng-value') || 0, max));
      $min.val(min);
      $max.val(max);
      $slider.slider({
        min: min,
        max: max,
        value: val,
        slide: function(event, ui) {
          var $input;
          val = ui.value;
          $input = $el.children('.ng-model-input');
          $input.val(val);
          $input.trigger('input');
          $el.children('.ng-model-value').text(val);
          return $el.data('ng-value', val);
        }
      });
      $min.on('input', function() {
        val = $min.val();
        $el.data('min', val);
        return $slider.slider({
          min: val
        });
      });
      $max.on('input', function() {
        val = $max.val();
        $el.data('max', val);
        return $slider.slider({
          max: val
        });
      });
      return $bubble;
    };
    expressionPopulator = function($el) {
      var $bubble, $done, $expression;
      $expression = jQuery('<input style="width: 7em;"/>');
      $done = jQuery('<button class="btn btn-primary">Done</button>');
      $bubble = jQuery('<span class="aloha-dialog"></span>');
      $bubble.append($expression);
      $bubble.append($done);
      $expression.val($el.data('ng-expression'));
      $done.on('click', function() {
        var expression;
        expression = $expression.val();
        updateExpression($el, expression);
        return $el.trigger('hide');
      });
      return $bubble;
    };
    Popover.register({
      hover: false,
      selector: '.ng-model-wrapper',
      populator: variablePopulator
    });
    return Popover.register({
      hover: false,
      selector: '.ng-expression-wrapper',
      populator: expressionPopulator
    });
  });

}).call(this);
